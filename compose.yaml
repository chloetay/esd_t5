services:
  deps-installer:
    build:
      context: ./backend
      dockerfile: requirements.Dockerfile
    volumes:
      - .:/app
  course:
    build:
      context: ./backend/Course
      dockerfile: Dockerfile
    container_name: course
    ports:
      - "5000:5000"
    environment:
      - dbURL=mysql+mysqlconnector://is213:password@mysql:3306/course
    depends_on:
      - mysql
    networks:
      - learning-network

  course-logs:
    build:
      context: ./backend/CourseLogs
      dockerfile: Dockerfile
    container_name: course-logs
    ports:
      - "5003:5003"
    depends_on: 
      - mysql
    environment:
      - dbURL=mysql+mysqlconnector://is213:password@mysql:3306/course
    networks:
      - learning-network

  enroll-log:
    build:
      context: ./backend/EnrollLog
      dockerfile: Dockerfile
    container_name: enroll-log
    ports:
      - "3000:3000"
    depends_on:
      - pgdb
      - rabbitmq
    environment:
      - DB_HOST=pgdb
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=Password123!
      - DB_NAME=enrolllog
      - RABBITMQ_URL=amqp://rabbitmq
    networks:
      - learning-network
    restart: always

  enroll:
    build:
      context: ./backend/Enroll
      dockerfile: Dockerfile
    container_name: enroll
    ports:
      - "5002:5002"
    depends_on:
      - course
      - enroll-log
      - enroll-error
    networks:
      - learning-network

  enroll-error:
    build:
      context: ./backend/EnrollError
      dockerfile: Dockerfile
    container_name: enroll-error
    ports:
      - "5004:5004"
    depends_on:
      - enroll-log
    networks:
      - learning-network

  kong:
    image: kong:latest
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/etc/kong/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - "9000:8000"
      - "8445:8443"
      - "8002:8001"
      - "8446:8444"
    volumes:
      - ./payment/kong.yml:/etc/kong/kong.yml
    networks:
      - learning-network
    depends_on:
      - payment-service
      - ui-service


  mysql:
    image: mysql:5.7
    platform: linux/amd64
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: course
      MYSQL_USER: is213
      MYSQL_PASSWORD: password
    ports:
      - "3307:3306"
    volumes:
      - ./backend/Course/db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backend/Course/db:/docker-entrypoint-initdb.d
      - ./backend/CourseLogs/db:/docker-entrypoint-initdb.d
      - ./init.sql:/docker-entrypoint-initdb.d/00-global-init.sql         
    networks:
      - learning-network


  payment-service:
    build:
      context: ./payment/payment-service
      dockerfile: Dockerfile
    ports:
      - "8083:8000"
    environment:
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - API_GATEWAY_URL=http://kong:8000
      - TRANSACTION_LOGS_URL=http://transaction-logs-service:8005/api/logs
    volumes:
      - ./payment/payment-service:/app
    networks:
      - learning-network


  pgdb:
    image: postgres
    container_name: pgdb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Password123!
    ports:
      - "5433:5432"
    volumes:
      - pgdb_data:/var/lib/postgresql/data
      - ./initPG.sql:/docker-entrypoint-initdb.d/initPG.sql
    networks:
      - learning-network

  php-notes:
    build:
      context: ./backend/Notes
      dockerfile: notes.Dockerfile
    ports:
      - "8003:8003"
    volumes:
      - ./backend/Notes:/var/www/html
    networks:
      - learning-network

  quiz:
    build:
      context: ./backend/Quiz
      dockerfile: quiz.Dockerfile
    container_name: quiz
    ports:
      - "5005:5005"
    environment:
      - PYTHONUNBUFFERED=1
      - db_password=NewSecurePassword123
    networks:
      - learning-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - learning-network

  take-course:
    build:
      context: ./backend/TakeCourse
      dockerfile: Dockerfile
    container_name: take-course
    ports:
      - "5001:5001"
    environment:
      - COURSE_SERVICE_URL=http://course:5000
      - COURSE_LOGS_URL=http://course-logs:5003
    depends_on:
      - course
      - course-logs
    networks:
      - learning-network

  transaction-logs-service:
    build:
      context: ./payment/transaction-logs-service
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    environment:
      - DATABASE_URL=postgresql://postgres:Password123!@pgdb:5432/transactionlogs
    volumes:
      - ./payment/transaction-logs-service:/app
    networks:
      - learning-network
    depends_on:
      - pgdb
    command: ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8005", "--reload"]


  ui-service:
    build:
      context: ./payment/ui-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    volumes:
      - ./payment/ui-service:/app
    networks:
      - learning-network
      
  # take-course (old2):
  #     build:
  #       context: ./backend/TakeCourse
  #       dockerfile: Dockerfile
  #     container_name: take-course
  #     ports:
  #       - "5001:5001"
  #     environment:
  #       - COURSE_SERVICE_URL=http://course:5000
  #       - COURSE_LOGS_URL=http://course-logs:5003
  #       - LESSON_SERVICE_URL=http://lesson:5005/LessonService/rest/LessonAPI
  #       - QUIZ_SERVICE_URL=http://quiz:8000
  #     depends_on:
  #       - course
  #       - course-logs
  #       - quiz
  #     networks:
  #       - learning-network

  # takecourse (old):
  #   build:
  #     context: ./takecourse
  #     dockerfile: Dockerfile
  #   ports:
  #     - "5001:5001"
  #   environment:
  #     - COURSE_SERVICE_URL=http://course:5000
  #     - COURSE_LOGS_URL=http://course-logs:5003
  #     - QUIZ_SERVICE_URL=http://quiz:8000
  #     - FLASK_ENV=production
  #   depends_on:
  #     - course
  #     - course-logs
  #     - quiz
  #   networks:
  #     - learning-network

networks:
  learning-network:

volumes:
  pgdb_data:
